#!/bin/sh
## Pavan K tambabathula
## Processbeat service for RPM Build
## v1.2.0 06/18/2019

APP_NAME="processbeat"
USER="root"
GROUP="$USER"
APP_DIR="/usr/share/processbeat/bin"
KWARGS=""
LOG_DIR="/var/log/processbeat"
PID_DIR="/var/run"
PID_FILE="$PID_DIR/$APP_NAME.pid"

###############

USAGE="Usage: $0 {start|stop|restart|status} [--force]"
FORCE_OP=false

if [ "$(id -u)" != "0" ]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi

pid_file_exists() {
    [ -f "$PID_FILE" ]
}

get_pid() {
    echo "$(cat "$PID_FILE")"
}

is_running() {
    PID="$(get_pid)"
    [ -d /proc/$PID ]
}

start_it() {
    echo "Starting $APP_NAME ..."
    echo "cd $APP_DIR
        if [ $? -ne 0 ]; then
          exit
        fi
        set -a
        /usr/share/processbeat/bin/processbeat -path.home /usr/share/processbeat -path.config /etc/processbeat -path.data /var/lib/processbeat -path.logs /var/log/processbeat &
        echo \$! > $PID_FILE" | sudo -i -u $USER
        echo "$APP_NAME started with pid $(get_pid)"
}

stop_process() {
    PID=$(get_pid)
    echo "Killing process $PID"
    kill $PID
    wait $PID 2>/dev/null
}

remove_pid_file() {
    echo "Removing pid file"
    rm -f "$PID_FILE"
}

start_app() {
    if pid_file_exists
    then
        if is_running
        then
            PID=$(get_pid)
            echo "$APP_NAME already running with pid $PID"
            exit 1
        else
            echo "$APP_NAME stopped, but pid file exists"
            if [ $FORCE_OP = true ]
            then
                echo "Forcing start anyways"
                remove_pid_file
                start_it
            fi
        fi
    else
        start_it
    fi
}

stop_app() {
    if pid_file_exists
    then
        if is_running
        then
            echo "Stopping $APP_NAME ..."
            stop_process
            remove_pid_file
            echo "$APP_NAME stopped"
        else
            echo "$APP_NAME already stopped, but pid file exists"
            if [ $FORCE_OP = true ]
            then
                echo "Forcing stop anyways ..."
                remove_pid_file
                echo "$APP_NAME stopped"
            else
                exit 1
            fi
        fi
    else
        echo "$APP_NAME already stopped, pid file does not exist"
        exit 1
    fi
}


status_app() {
    if pid_file_exists
    then
        if is_running
        then
            PID=$(get_pid)
            echo "$APP_NAME running with pid $PID"
        else
            echo "$APP_NAME stopped, but pid file exists"
        fi
    else
        echo "$APP_NAME stopped"
    fi
}

case "$2" in
    --force)
        FORCE_OP=true
    ;;

    "")
    ;;

    *)
        echo $USAGE
        exit 1
    ;;
esac


case "$1" in
    start)
        start_app
    ;;

    stop)
        stop_app
    ;;

    restart)
        stop_app
        start_app
    ;;

    status)
        status_app
    ;;

    *)
        echo $USAGE
        exit 1
    ;;
esac

